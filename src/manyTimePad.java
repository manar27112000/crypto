import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class manyTimePad
{
    
   static List<String> cipherTexts = new ArrayList<>(Arrays.asList("A67AFBF175434730098CFF2E0126FDE0DB6D292745711F7F07BC12119B9C258DA5E0AEF012DC61723F9709B3D394464ED2BECABB0B966303474E9A74A4AA632C5D23B29657FF7EA992937AECC238C2E8EF7E5127ED454185C5CDCAA5DEB2B6FFB86C28A4161694F3D3E9ABF5D8B06644FE417000B40783C7CB9CBF4B1D45B28D0E387B8DEF46764F1F3DAC8B31ECBB52D4EE3A413119828652046811F1C38D515643793A3B7C7D9EABC723AC5D42E7E4852440A9674CE0DBFC99510DEDE381338F45B14E860F9B141A49CF82F1C58C430CDAD8D3867FF656097CE05323822A3349D8AC28AD05ECC9A478B2E672B3239B240F366E2A185D",
           "827AFEF16E065C600396E72E0B34B3A9D4213629116D023A46A61E5881C87185BCEDAEE915CD2F332A8F1DEACED1414FD2A7C7BF459D68175F0B8A6FEBB7653107238C9D57FF64A5D7953BFBC67FD8E6EC751573E75B15C482CCC1B3C5B4ACBABA2333EA57458BF1C5BDA1E1D8B02352B6456D07E048868ED891B2465846A49A4A7D7B9FE4017A410D78AFC736F8BC17"
           ,"867AFBF175434730098CFF2E0126FDFDDD28652B5E6B057F05BD1B5C9D862586ABEBE3BE12CE613114920DAFCBDD4A4CD0E4829644836306561CD971A4B16569126D81D31AE47EA5D7873FF7DD74CFA9F8691473FB5456CE82C9CAA48CA7ABE8B92861A550458EEDDFA7A3B38CAC6B01AD4D7216E05495C3DF95B6124955B99C4A776189F30162401C78B0DD36EBEF13DAE97356",
           "BD70A9E3790D5A600E96B2660923B8A9C6222823116C142712F20259939C2584ABFCFDF05ADC617E368106EAC1DA5D5F9AA3CCB90B9D6850430F8B68A2A075251271C59902F878E083987AF1C37CC3EAF86F1473FC5554D1828ACCA5DEB6E2F3AF6C36A253179EBEC2A1A1B38CA17655FE5B761FAC0796CB8D",
           "EA46E6B46F0B57600991FD7B0431B3AEC16D32231172042C12F2155E82912890A5EAFAFB5DC961603A8E0FA6C594574E9CBEC7B0489126115D0AD97BAEB720285361899C14E02CAF91D72EFDD56C8AB6B9531025ED1D5485CEC7CBAB8CB2B6BAA82424EA500A97F2D9BEADFD9F","9D70A9F5740F0E2B1496E52E1C3DB8A9C03E30275D381B300DB70511938A6A95B0B9FAF61888664074C001A480936D44A6ED82AD5F9568145A009E3CADAC72695450809002F965B48ED074B8E46C8DFAB9731021EC514C85C388D7A5CFA1A7EEFC3829AB424588FBD5BCB6FA8CBD2E48B00C7A1EA24290CACA9DF3535354E1860F6C6083F34A664A583CBADD3AFAAA019DE169183F00CEC7540E2758F0859D514B137D6836696BCAE8CF2FA60859E4E483245DA6",
           "8B66FAE175060E341298E62E0175B5E8C3286522547E183103B6565F979F25B2A5F7EAF1108075217AC001A480D7484A81B982BF459026195D4E9872A4B7682C0123869F16F87FE09ED73BFFCC71C4A9FD74513DED4A15F7C3C6C0AFC1FBEBBAB3222DB3160495FA96A0E4F497B02E45B74A7916B2429ADA8F8BB641485CB5C644367E9FA1556B4B0A3DFFCA3DE0EF06D8EB7256371DD78200152019EBC3801446527268296D6C9EB7C328AC1240A1B792204AED6F4DAFCDF88D4954A4ECCF2EC056AC1CC91D835104518186E8C598550CC09DDA872BA3564870EB53308E272F40D8AB29BB05FEDAE666A7E670BB26C83E5B73702A041822817DE05D75D3F00F0C9082ECD604D7C57AB25690CC738BF1BB9532E3BB3C06DF7CA2EEFC033E1E845860D7CE249E6047FAA00A1E08AE59BAAA685BC112F0D3CAD5DF0D1B72CB3457E9D5",
           "9E7DE8E03F100E34129CB27E1A3CB3EADC3D29231177177F07F22642979D618FE9CBC0D95388157B36C006BFCDD6415981EAC3AC4ED4681F474E8B79AAAF6C305371849D13E461","9E7DECED38025C255A9EF7600D27BCFDD029653342711F3846B35655979C6092A9F0E0F70EDC2870738104ADCFC64D5F9AA7",
           "9A67E6F674064360138AB27A0034A9A9CC223066427D143B46A61E54D29A648EA0F6E3BE1ACD2F7621811CA5D294454C93A3CCF00BB170154117D968A2AE65690A6C90D304EE69A4D79E2EB8D970CFA9F0751827E15C59", "9E7DECB46B064D321F8DB2630D26AEE8D228652F422251080EB71811879B6C8EA3B9EFBE0EDC3376328D48A9C9C44C4E80EACCBB5D917450461D9C3CBFAB656918669CD31AE47EA5D78332F9C338C5E7FA7E517BB9040792939892E9"
           ));

           // Convert string to hex
    static String stringToHex(String string) {
        String hex="";
        for (int i = 0; i <string.length() ; i++) {
            String x=Integer.toHexString(string.charAt(i));
            if(x.length()==2){
                hex+=x;
            }else{
                hex+=" "+x;
            }
        }
        return hex;
    }

    // Convert hex to string
    public static String hexToString(String hex) {
        String string = "";
        for (int i = 0; i < hex.length(); i += 2) {
         //باخد كل 2 hex احولهم ل char
            string += (char) Integer.parseInt(hex.substring(i, i + 2),16);
        }
        return string;
    }

    //check character validation
    public static boolean  validChar(String  _char){

        return ((!_char.equals(""))
                && (_char != null)
                && (_char.matches("^[a-zA-Z]*$")));

    }

    public static String stringXOR(String a,String b ){
        StringBuilder xor_string=new StringBuilder();
           if(a.length()>=b.length()){
               for (int i = 0; i <b.length() ; i++) {
                   xor_string.append((char) (a.charAt(i)^b.charAt(i)));}
           }else{
               for (int i = 0; i <a.length() ; i++) {
                   xor_string.append((char) (a.charAt(i)^b.charAt(i)));
               }
           }
        return xor_string.toString();
        }



    public static void main(String[] args) {
// For every cipher run with all ciphers except itself
// For each cipher text
        for (int i=0; i<cipherTexts.size(); i++) {


            List<Integer> counter = new ArrayList<Integer>();
            // For each other cipher text
            for (int j=0; j<cipherTexts.size(); j++) {
                // If both ciphers are not same
                if  (i != j) {
                    String XORed = stringXOR( hexToString( cipherTexts.get(i)), hexToString(cipherTexts.get(j)) );
                    for (int k=0; k<XORed.length(); k++) {
                        // If the char is between [a-z, A-Z]
                        if ( Character.isLetter(XORed.charAt(k)) ) {
                            // Update counter checking with all other ciper texts
                            counter.add(k);
                        }
                    }
                }
            }
        }
        // Find out the orignal messages
        for (var o=0; o<cipherTexts.size(); o++) {
            System.out.print(stringXOR((hexToString(cipherTexts.get(o)))," "));
        }
        }

    }

